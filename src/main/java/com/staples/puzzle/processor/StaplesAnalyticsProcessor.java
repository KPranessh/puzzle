package com.staples.puzzle.processor;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.staples.puzzle.bean.OrderBean;
import com.staples.puzzle.bean.OrderDataBean;
import com.staples.puzzle.bean.StaplesReportBean;
import com.staples.puzzle.bean.SummaryBean;
import com.staples.puzzle.bean.SummaryDataBean;
import com.staples.puzzle.data.access.StaplesAnalyticsDAOFactory;
import com.staples.puzzle.util.StaplesConstants;
import com.staples.puzzle.util.StaplesOrderComparator;

/**
 * Main singleton processor class for Staples Analytics Application
 * This processor class contains method for generating the analytics report based
 * on the requested sort order.
 * 
 * @author KANPR001
 *
 */
public class StaplesAnalyticsProcessor implements IStaplesAnalyticsProcessor{
	
	private static final Logger LOGGER = LoggerFactory.getLogger(StaplesAnalyticsProcessor.class);
	
	/**
	 * Singleton instance of the staples analytics processor
	 */
	private static StaplesAnalyticsProcessor processor_instance = null;	
	
	/**
	 * Default constructor
	 */
	private StaplesAnalyticsProcessor(){
		LOGGER.info("StaplesAnalyticsProcessor - Instance created");		
	}
	
	/**
	 * Public exposed method to either retrieve StaplesAnalyticsProcessor instance
	 * if already present or create a new one.
	 * 
	 * @return processor_instance - instance of the StaplesAnalyticsProcessor
	 */
	public static StaplesAnalyticsProcessor getInstance(){
		if(null == processor_instance){
			processor_instance = new StaplesAnalyticsProcessor();
		}
		
		return processor_instance;
	}
	
	/**
	 * This method generates the final analytics report based on the reportType requested in the input
	 *  a) Retrieve Staples and Merchant Order data as {@link OrderDataBean}
	 *  b) Merge the OrderDataBeans to form the {@link OrderBean}
	 *  c) Push all the OrderBeans into an {@link ArrayList}
	 *  d) Sort the OrderBeans based on the requested reportType
	 *     (1) session-type-desc - sort by session_type descending
	 *     (2) order-id-asc - sort by order_id ascending
	 *     (3) unit-price-dollars-asc - sort by unit_price_dollars ascending
	 *  e) Meanwhile calculate Staples and Merchant {@link SummaryDataBean}
	 *  f) Create an instance of {@link StaplesReportBean} with summary and details of all Staples
	 *     and Merchant Orders
	 *  
	 * @param reportType - type of report that needs to be generated by this method
	 * @return reportBean - final report as instance of {@link StaplesReportBean}
	 */
	public StaplesReportBean getAnalyticsReport(String reportType){
		long startTime = System.currentTimeMillis();
		
		Map<Integer, OrderDataBean> staplesOrderMap = null;
		Map<Integer, OrderDataBean> merchantOrderMap = null;
		
		List<OrderBean> orderList = null;
		Iterator<Integer> ordersIT = null;
		Integer currOrderID = null;
		
		OrderDataBean staplesOrderBean = null;
		OrderDataBean merchantOrderBean = null;
		OrderBean orderBean = null;
		SummaryDataBean staplesSummaryBean = null;
		SummaryDataBean merchantSummaryBean = null;
		SummaryBean summaryBean = null;
		StaplesReportBean reportBean = null;
		
		try{
			//Step #1 - Retrieve the Staples Order details as a HashMap instance
			staplesOrderMap = StaplesAnalyticsDAOFactory.getInstance().getStaplesOrderFileDAO().getOrderData();
			
			//Step #2 - Retrieve the Merchant Order details as a HashMap instance
			merchantOrderMap = StaplesAnalyticsDAOFactory.getInstance().getMerchantOrderFileDAO().getOrderData();
			
			if((staplesOrderMap != null) && (!staplesOrderMap.isEmpty())){
				ordersIT = staplesOrderMap.keySet().iterator();
										
				staplesSummaryBean = new SummaryDataBean();
				merchantSummaryBean = new SummaryDataBean();
				
				while(ordersIT.hasNext()){
					currOrderID = ordersIT.next();
					
					staplesOrderBean = staplesOrderMap.get(currOrderID);
					merchantOrderBean = (merchantOrderMap != null)? merchantOrderMap.get(currOrderID) : null;
					
					//Creating OrderBean for the current Order
					//If an associated Merchant Order is not available for the current Staples Order,
					//then create the OrderBean with an empty Merchant Order Data Bean
					if(merchantOrderBean != null){
						orderBean = new OrderBean(staplesOrderBean, merchantOrderBean);
					}
					else{
						orderBean = new OrderBean(staplesOrderBean, new OrderDataBean());
					}
					
					//Instantiate the orderList reference to add the OrderBeans
					//generated in the above steps
					if(null == orderList){
						orderList = new ArrayList<OrderBean>();
					}
					orderList.add(orderBean);
					
					//Populating the Staples Summary Data Bean
					staplesSummaryBean.addUnitPrice(staplesOrderBean.getUnit_price_dollars());
					staplesSummaryBean.addStaplesDiscount(staplesOrderBean.getStaples_discount_dollars());
					staplesSummaryBean.addMerchantDiscount(staplesOrderBean.getMerchant_discount_dollars());
					
					//Populating the Merchant Summary Data Bean
					merchantSummaryBean.addUnitPrice(merchantOrderBean.getUnit_price_dollars());
					merchantSummaryBean.addStaplesDiscount(merchantOrderBean.getStaples_discount_dollars());
					merchantSummaryBean.addMerchantDiscount(merchantOrderBean.getMerchant_discount_dollars());
				}
				
				//Sort Order details of Staples and Merchants' based on the requested sorting
				sortStaplesMerchantOrderData(orderList, reportType);
			}
			
			//Populate the calculated Order summary details of Staples and Merchant orders
			summaryBean = new SummaryBean(staplesSummaryBean, merchantSummaryBean);
			
			//Populate the final Analytics report with the Summary and Order details
			reportBean = new StaplesReportBean(summaryBean, orderList);
		}
		catch(Exception e){
			LOGGER.error("StaplesAnalyticsProcessor.getAnalyticsReport resulted in error!\n");
			LOGGER.error(e.getMessage());
		}
		finally{
			staplesOrderMap = null;
			merchantOrderMap = null;
			ordersIT = null;
			currOrderID = null;
		}
		
		LOGGER.info("StaplesAnalyticsProcessor.getAnalyticsReport::ExecutionTime::["+(System.currentTimeMillis() - startTime)+"] ms");
		return reportBean;
	}
	
	/**
	 * This method sorts the {@link List} of {@link OrderBean} using the
	 * sort method of {@link Collections} and an instance of {@link StaplesOrderComparator} created
	 * using the sort by criteria such as detailed below
	 *  a) ASC - Ascending sorting
	 *  b) DESC - Descending sorting
	 *  c) SESSION_TYPE - Enum to denote session_id 
	 *  d) ORDER_ID - Enum to denote order_id
	 *  e) UNIT_PRICE_DOLLARS - Enum to denote unit_price_dollars
	 * @param orderList - List of Staples and Merchant Order Beans
	 * @param reportType - sort by criteria for the final analytics report
	 */
	private void sortStaplesMerchantOrderData(List<OrderBean> orderList, String reportType){
		long startTime = System.currentTimeMillis();
		
		try{
			if(StaplesConstants.SESSION_TYPE_SORT_DESC.equalsIgnoreCase(reportType)){
				Collections.sort(orderList, new StaplesOrderComparator(StaplesOrderComparator.SORT_FIELD.SESSION_TYPE, 
																		StaplesOrderComparator.SORT_TYPE.DESC));
			}
			else if (StaplesConstants.ORDER_ID_SORT_ASC.equalsIgnoreCase(reportType)){
				Collections.sort(orderList, new StaplesOrderComparator(StaplesOrderComparator.SORT_FIELD.ORDER_ID, 
																		StaplesOrderComparator.SORT_TYPE.ASC));
			}
			else if (StaplesConstants.UNIT_PRICE_DOLLARS_SORT_ASC.equalsIgnoreCase(reportType)){
				Collections.sort(orderList, new StaplesOrderComparator(StaplesOrderComparator.SORT_FIELD.UNIT_PRICE_DOLLARS, 
																		StaplesOrderComparator.SORT_TYPE.ASC));
			}
		}
		catch(ClassCastException cce){
			LOGGER.error("One or many of the OrderBeans are not comparable! Keeping OrderBean List unsorted.");
			LOGGER.error(cce.getMessage());
		}
		catch(UnsupportedOperationException uoe){
			LOGGER.error("OrderList Iterator does not support Set Operation! Keeping OrderBean List unsorted.");
			LOGGER.error(uoe.getMessage());
		}
		catch(IllegalArgumentException iae){
			LOGGER.error("Unknown illegal argument passed to the Comparator! Keeping OrderBean List unsorted.");
			LOGGER.error(iae.getMessage());
		}
		
		LOGGER.info("StaplesAnalyticsProcessor.sortOrderReport::ExecutionTime::["+(System.currentTimeMillis() - startTime)+"] ms");
	}
}	//EOF StaplesAnalyticsProcessor.java